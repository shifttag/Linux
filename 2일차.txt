> : 표준 출력

man : manual(메뉴얼) 
man (명령어) : 해당 명령어가 어떤 일을 수행하는지
	        어떤 옵션이 있는지 확인 가능
q누르면 나가짐

pwd : print work directory의 줄임말로
	현재 작업중인 디렉터리 경로를 뜻함

clear : 콘솔창 비우기

ls : 현재 디렉터리의 내부 파일 출력
ls -l (l = long : 상세정보)
ls -a (a = all : 모든 파일 출력)
ls -F (F : 종류 구분 출력)		/ : 디렉터리, @ : 심벌릭 링크(윈도우 바로가기), 
ls -Fa : 종류 구분 출력(숨김 파일 까지)
ls -la : 모든 파일 상세 정보 출력
ls dir1 : 원하는 디렉터리 내부 보기


경로 이동
cd : (change directory)
cd dir1
cd (~) : 홈 디렉터리로 이동
cd - : 이전 경로로 이동
cd / : 루트 디렉터리로 이동
절대경로 / 상대경로

절대 경로 : 루트 디렉터리를 기준으로 하는 경로
절대 경로의 경우 /로 시작
cd /home/ubuntu/dir1

상대 경로 : 내 현재 위치를 기준으로 하는 경로
cd dir

. (현재 디렉터리)
.. (부모 디렉터리)

명령어 기본 
명령어 <옵션> <인자>
(옵션은 필수는 아님 또 조합해서 쓸 수 있다, 인자는 경우에 따라 필수)
mkdir -p dir1

Quiz
cd dir1
dir1 위치에서 상대경로를 사용해서 dir2로 한번의 명령어로 이동
cd ../dir2

절대경로로 가는 방법
cd /home/ubuntu/dir1
->
cd /home/ubuntu
->
cd /home/ubuntu/dir2

상대경로를 사용하는 이유
환경이 다 다르기 때문에 
쉘 스크립트에서 쓰기 좋다.

홈 디렉터리 : 현재 사용자의 바탕화면
루트 디렉터리 : 제일 근본 디렉터리
부모 디렉터리 : 내 현재 위치보다 루트 디렉터리에 가까운 디렉터리
자식 디렉터리 : 내 현재 위치보다 루트 디렉터리에서 먼 디렉터리

/home : 홈 디렉터리 모인 곳
/boot : OS 실행파일 모인 곳
/var : 변수 파일 모인 곳

파일 : 데이터를 저장하는 그릇 (실행파일, 텍스트파일, 이미지파일)
디렉터리 : 리눅스에서는 파일로 취급
하드디스크, 키보드(장치 파일) : 리눅스에서는 파일로 취급
심벌릭 링크(파일) 
결론 : 리눅스에서 모든 것은 파일이다

file 파일이름
파일 종류 확인 명령어

일반 파일(바이너리 파일)
실행 파일, 텍스트 파일, 이미지 파일
바이너리 : 이진

touch file2.txt : 빈 파일 생성 명령어
echo "hello World" > file3.txt
echo 명령어는 출력 명령어

cat file3.txt
파일 내용 출력 명령어
cat file2.txt

echo "hello linux" >> file3.txt 
echo "hello linux" > file3.txt
> : 덮어쓰기
>> : 가장 밑에 추가(append)

파일과 디렉터리 이름 규칙

1. / 
/home/ubuntu/my/linux 가 되기 때문에 
my/linux 

2. * 
정규표현식 때문에 못쓴다

3. 공백
런타임 에러가 발생하기 쉬워서 못쓴다
mkdir dir1 dir2 하면 2개 생성인데 mkdir my linux

4. @
심벌릭 링크가 사용중

5. #, $, %, ^, &
다른 애들이 사용중

.(dot) 은 사용가능
파일명 앞에 .이 있으면 숨김파일로 생성

대소문자 구별가능

정리 
/, 공백, |, ", ', @, #, $, %, ^, & 금지
-(붙임표), _(밑줄) 가능
.을 앞에 붙이면 숨김 파일
대소문자 구별

숨김파일 생성
touch .file4.txt

mkdir -p dir3/sub-dir1
mkdir dir4/sub-dir2

mkdir -p
디렉터리를 생성하는데 중간 디렉터리가 존재하지 않으면 생성한 후 디렉터리 생성
쉘 스크립트 작성을 고려해야 한다

디렉터리 제거
rmdir(remove directory) 
rmdir 디렉터리 이름
rmdir file1.txt 는 불가(파일만 삭제가능)

파일 제거
rm file1.txt

연습
1. 현재 위치를 확인한다. 홈디렉터리가 아니면 홈 디렉터리로 이동한다
pwd
2. 실습을 위한 기본 디렉터리를 만든다. 먼저 홈 디렉터리에 linux_ex 디렉터리를 만들고 그 디렉터리로 이동한다
	해당 실습은 이 디렉터리 내부에서 한다
mkdir linux_ex
cd linux_ex
3. ch2 디렉터리를 만들고 그 디렉터리로 이동하여 현재 위치를 알아본다
mkdir ch2
cd ch2
pwd
4. one, two, three 디렉터리를 동시에 만든다
mkdir one two three
5. one 디렉터리 아래에 tmp/test 디렉터리를 만든다. 중간 경로인 tmp 디렉터리가 자동 생성되도록 한다
mkdir -p one/tmp/test
6. one 디렉터리를 rmdir 명령으로 삭제 해본다
rmdir one(하면 삭제 안됨) rmdir -r one 	(r : recursive(재귀적) 옵션 - 해당 디렉터리와 하위파일들을 모두 제거한다) 
재귀적 옵션 로직
one/tmp/test
rm one -> 오류
ls one
rm one/tmp -> 오류
ls one/tmp
rm one/tmp/test -> 성공
rm one/tmp -> 성공
rm one -> 성공
7. two, three 디렉터리를 동시에 삭제한다
rmdir two three
8. 실습을 마치고 홈 디렉터리로 이동한다
cd

2일차 정리

1. 현재 작업 디렉터리 절대 경로 보기 명령어
pwd

2. 메뉴얼 명령어
man

3. 콘솔창 비우기
clear -> 윈도우 cmd에서는 cls

4. 경로 이동
cd
cd ~ (홈 디렉터리)
cd / (루트 디렉터리)
cd - (이전 경로)
5. 현재 디렉터리 파일 리스트 보기
ls
ls -a (모든 파일 보기)
6. 파일 종류 출력 명령어
file

7. 디렉터리 생성 명령어
mkdir

8. 빈 파일 생성 명령어
touch

9. 파일 내용 출력 명령어
cat

10. 디렉터리만 제거 명령어
rmdir

11. 파일 제거 명령어
rm
rm -r 하위 파일까지 삭제

12. 명령어 도움말
명령어 --help

13. 숨김파일
.로 시작하면 숨김파일

14. 문자열 출력
echo


IDE 현업에서 쓰는거
VSCode(무료)	intelliJ(학교이메일 하면 1년 무료)

자바스크립트
- 타입(String, int, long)이 없다
- 런타임 오류가 많이 발생한다.
- intelliJ는 타입 추측을 해준다

-> 타입스크립트

예외
- 런타임 예외
- 컴파일 예외