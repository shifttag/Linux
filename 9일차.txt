< 9일차 >
파일 시스템
	파일 : 데이터나 실행 코드를 담고 있는 그릇
	파일 시스템 : 그릇을 과니하는 시스템

리눅스 파일 시스템
	ext1, ext2, ext3, ext4, XFS
	
	파일저장 - 하드디스크에 저장됨
	연속적으로 할당 : 연속 할당 (Contiguous Allocation)
	번호와 상관없이 연결 할당 : 연결 할당 (Linked Allocation)
	0번이 트리구조로 할당 : 색인 할당 (Indexed Allocation)
		
슈퍼 블록 : 중요한 데이터를 담고 있는 블록
	1. 전체 inode 개수가 몇개인지
	2. 전체 데이터 블록 개수
	3. 할당 되지 않은 데이터 블록 개수
	4. 첫번째 데이터 블록의 주소
	5. 블록의 크기

	파일 시스템 자체가 망가져서 사용할 수 없게 됨
	슈퍼블록은 백업되어 있음
	망가질 경우 복사본을 사용하여 복구시킴

	ext1 : 현재는 사용되지 않음. 
		최대 파일 시스템 크기 2GB
	ext2 : 최대 파일 시스템 크기 32TB 
	ext3 : 최대 파일 시스템 크기 32TB, 저널링
	ext4 : 최대 파일 시스템 크기 1EB
	XFS : 최대 파일 시스템 크기 16EB

	저널링 과정
	1. 트랜잭션 시작 - 저널에 기록
	2. inode 변경 기록을 저널에 저장
	3. 실제로 데이터를 변경
	4. 데이터블록 변경 기록 저널에 저장
	5. 실제로 데이터블록 변경
	6. 트랜잭션 완료

	실패하면 복구시키려고 씀
	1. 데이터 블록 일부만 변경이 적용된 경우
		- 데이터 블록을 검사해서 데이터 불일치를 확인하고 조치
	2. 데이터 불일치 - 복구가 힘들다
		- 파일 자체를 롤백 (파일이 생성 된 것 자체를 부정)

스프링 부트 : service 레이어에서 사용하는 개념
	     @Transactional	CRUD R을 제외하고 사용되는 어노테이션
	     @Transactional(readonly) R에서 사용 중간에 실패하면 저장자체를 안함(롤백)
	

swqp, tmpfs, proc, hfs

	tmpfs : temprorary file system(임시 파일 시스템)
		시스템이 재시작하면 기존 내용 없어짐
마운트

서버를 증설시키는 방법
	스케일업 : 장비를 업그레이드
	스케일아웃 : 장비를 추가

파티션 : 물리적인 저장장치를 논리적인 개념으로 나눈 영역

	파티션 두개로 나눔 
	sdb1 = 15GB
	sdb2 = 10GB
		
		fdisk /dev/sdb1
		n -> p -> (Enter) -> +15G ->
		n ->  p -> (Enter) -> +10G ->

	mkfs 명령어로 파일 시스템 적용하기
	sdb1 ext3
	sdb2 ext4
	
		mkfs -t ext3 /dev/sdb1 
		mkfs -t ext4 /dev/sdb2

		mkdir /mnt/hdd1
		mkdir /mnt/hdd2

		mount /dev/sdb1 /mnt/hdd1
		mount /dev/sdb2 /mnt/hdd2

		마운트 확인 : df -h



